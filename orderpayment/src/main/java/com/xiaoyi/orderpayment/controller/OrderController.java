package com.xiaoyi.orderpayment.controller;

import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.xiaoyi.orderpayment.model.OrderInfo;
import com.xiaoyi.orderpayment.model.ProductInfo;
import com.xiaoyi.orderpayment.service.IOrderService;
import com.xiaoyi.orderpayment.service.IProductService;
import com.xiaoyi.orderpayment.utilities.bean.OrderInfoDataResult;
import com.xiaoyi.orderpayment.utilities.bean.ProductInfoDataResult;
import com.xiaoyi.orderpayment.utilities.bean.ResponseData;
import com.xiaoyi.orderpayment.utilities.constant.MessageConstants;
import com.xiaoyi.orderpayment.utilities.constant.Constants;
import com.xiaoyi.orderpayment.utilities.constant.Constants.InternalOrderPaymentService;
import com.xiaoyi.orderpayment.utilities.constant.Constants.RequestParamNames;
import com.xiaoyi.orderpayment.utilities.controller.BaseController;
import com.xiaoyi.orderpayment.utilities.utilities.GenerateOrderCode;

import com.xiaoyi.orderpayment.config.AppConfig;

@RestController
public class OrderController extends BaseController{

	private static final Logger logger = LoggerFactory.getLogger(OrderController.class);
	
	private AppConfig appConfig;
	private IOrderService orderService;
	private IProductService productService;
	
	@Autowired
	public OrderController(AppConfig appConfig, IOrderService orderService,IProductService productService) {
		this.appConfig = appConfig;
		this.orderService = orderService;
		this.productService = productService;
	}	
	
	/**
	 * Generate an order when user submits it from App
	 * @param appId
	 * @param userId
	 * @param orderNo
	 * @param productId
	 * @param orderStatus
	 * @param originalPrice
	 * @param totalPrice
	 * @param lastModifiedDate
	 * @param purchasedTime
	 * @return
	 */
	@RequestMapping(value = InternalOrderPaymentService.GenerateOrderPath, method = RequestMethod.POST)
	@ResponseBody
	public ResponseData generateOrder(
			@RequestParam(value = RequestParamNames.AppId, required = true) String appId,
			@RequestParam(value = RequestParamNames.UserId, required = true) String userId,
			@RequestParam(value = RequestParamNames.OrderNo, required = true) String orderNo,
			@RequestParam(value = RequestParamNames.ProductId, required = true) String productId,
			@RequestParam(value = RequestParamNames.SKUId, required = true) String skuId,
			@RequestParam(value = RequestParamNames.OrderStatus, required = true) String orderStatus,
			@RequestParam(value = RequestParamNames.OriginalPrice, required = true) String originalPrice,
			@RequestParam(value = RequestParamNames.TotalPrice, required = true) String totalPrice,
			@RequestParam(value = RequestParamNames.ProductCurrency, required = true) String currency,
			@RequestParam(value = RequestParamNames.PaymentType, required = true) String paymentType,
			@RequestParam(value = RequestParamNames.LastModifiedDate, required = true) String lastModifiedDate,
			@RequestParam(value = RequestParamNames.PurchasedTime, required = true) String purchasedTime,
			@RequestParam(value = RequestParamNames.ClientChannel, required = false) String clientChannel,
			@RequestParam(value = RequestParamNames.PaymentCode, required = false) String paymentCode
			){
		OrderInfo orderInfo = new OrderInfo();
		
		orderInfo.setCustomerId(userId);
		orderInfo.setProductId(Long.parseLong(productId));
		orderInfo.setProductId(Long.parseLong(skuId));
		orderInfo.setOriginalPrice(Integer.parseInt(originalPrice));
		orderInfo.setFinalPrice(Integer.parseInt(totalPrice));
		orderInfo.setOrderCurrency(currency);
		orderInfo.setOrderStatus(Integer.parseInt(orderStatus));
		orderInfo.setOrderCode(orderNo);
		orderInfo.setPaymentType(Integer.parseInt(paymentType));
		orderInfo.setClientChannel(Integer.parseInt(clientChannel));
		Calendar c = Calendar.getInstance();
		c.setTimeInMillis(Long.parseLong(lastModifiedDate));
		orderInfo.setLastModified(c.getTime());
		c.setTimeInMillis(Long.parseLong(purchasedTime));
		orderInfo.setDatePurchased(c.getTime());
		if(!StringUtils.isEmpty(paymentCode)){
			orderInfo.setPaymentCode(paymentCode);
		}
		if (!orderService.generateOrder(orderInfo)) {
			return failureResponse(MessageConstants.V5_SUBMIT_ORDER_FAILURE_CODE,
					"reason", "The order generated by "+userId + " failed");
		}

		return successResponse();
	}
	
	/**
	 * Get order list by user
	 * @param appId
	 * @return
	 */
	@RequestMapping(value = InternalOrderPaymentService.GetOrderListPath, method = RequestMethod.GET)
	@ResponseBody
	public ResponseData getOrderList(
			@RequestParam(value = RequestParamNames.AppId, required = true) String appId,
			@RequestParam(value = RequestParamNames.UserId, required = true) String userId
			){
		//TODO: This service is reserved for data analysis and report portal
		List<OrderInfo> orderList = orderService.getOrderList(userId);
		
		return successResponse(RequestParamNames.OrderList,orderList);
	}
	
	@RequestMapping(value = InternalOrderPaymentService.SYNCANOrderStatusFromAppServerPath, method = RequestMethod.PUT)
	@ResponseBody
	public ResponseData syncOrderStatusFromAppServer(
			@RequestParam(value = RequestParamNames.AppId, required = true) String appId,
			@RequestParam(value = RequestParamNames.OrderNo, required = true) String orderCode,
			@RequestParam(value = RequestParamNames.OrderStatus, required = true) String orderStatus
			){
		OrderInfo orderInfo = orderService.getOrderByCode(orderCode);
		orderInfo.setOrderStatus(Integer.parseInt(orderStatus));
		orderInfo.setLastModified(new Date());
		
		boolean isUpdateSuccess = orderService.updateOrderStatus(orderInfo);
		if (!isUpdateSuccess) {
			return failureResponse(MessageConstants.V5_ODERSTATUS_SYNC_FAILURE_CODE,
					"reason", "Updating the order-"+orderCode + "'s status failed");
		}

		return successResponse(RequestParamNames.UpdateStatus,isUpdateSuccess);
	}
	
	@RequestMapping(value = InternalOrderPaymentService.SYNCPaymentCodeFromAPPServerPath, method = RequestMethod.PUT)
	@ResponseBody
	public ResponseData syncPaymentCodeFromAppServer(
			@RequestParam(value = RequestParamNames.AppId, required = true) String appId,
			@RequestParam(value = RequestParamNames.OrderNo, required = true) String orderCode,
			@RequestParam(value = RequestParamNames.PaymentCode, required = true) String paymentCode
			){
		OrderInfo orderInfo = orderService.getOrderByCode(orderCode);
		orderInfo.setPaymentCode(paymentCode);
		orderInfo.setLastModified(new Date());
		
		boolean isUpdateSuccess = orderService.updateOrderStatus(orderInfo);
		if (!isUpdateSuccess) {
			return failureResponse(MessageConstants.V5_PAYMENTCODE_SYNC_FAILURE_CODE,
					"reason", "Updating the order-"+orderCode + "'s status failed");
		}

		return successResponse(RequestParamNames.UpdatePaymentCode,isUpdateSuccess);
	}
}
